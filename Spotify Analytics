# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

# 1. I determined the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

# 2. I found which artist has the most tracks in the dataset
SELECT artist_name, COUNT(*) AS track_count
FROM BIT_DB.spotifydata
GROUP BY artist_name
ORDER BY track_count DESC
LIMIT 1;

# 3. Next I found the track with the highest tempo
SELECT track_name, artist_name, tempo
FROM BIT_DB.spotifydata
ORDER BY tempo DESC
LIMIT 1;

# 4. I also looked at the tracks with a tempo between 100 and 120 BPM
SELECT COUNT(*) AS tracks_with_tempo_100_120
FROM BIT_DB.spotifydata
WHERE tempo BETWEEN 100 AND 120;

# 5. Lastly I looked at which key was most common
SELECT song_key, COUNT(*) AS key_count
FROM BIT_DB.spotifydata
GROUP BY song_key
ORDER BY key_count DESC
LIMIT 1;
